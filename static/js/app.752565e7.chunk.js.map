{"version":3,"sources":["App.js"],"names":["App","useState","state","setstate","result","setResult","style","styles","container","margin","textAlign","borderWidth","borderColor","height","placeholder","autoCapitalize","value","onChangeText","text","title","onPress","valueWithoutElement","searching","includes","isExisted","console","log","exec","length","forEach","element","replace","isBalanced","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":"mMAIe,SAASA,IAEtB,MAA0BC,mBAAS,IAAnC,WAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,IAArC,WAAOG,EAAP,KAAeC,EAAf,KAEA,OACE,kBAAC,IAAD,CAAMC,MAAOC,EAAOC,WAClB,kBAAE,IAAF,CAAOF,MAAO,CACZG,OAAQ,GACRC,UAAW,SAFb,gBAIA,kBAAC,IAAD,CACEJ,MAAO,CACLG,OAAQ,GACRE,YAAa,EACbC,YAAa,MACbF,UAAW,OACXG,OAAQ,IAEVC,YAAY,mBACZC,eAAe,OACfC,MAAOd,EACPe,aAAc,SAACC,GAAD,OAAUf,EAASe,MACnC,kBAAC,IAAD,CACEC,MAAM,WAAWb,MAAO,CACtBG,OAAQ,IAEVW,QAAU,WACRf,EAiBV,SAAoBW,GAElB,IAAIK,EAAsBL,EACtBM,EAAY,GAEhB,IAAKD,EAAoBE,SAAS,OAASF,EAAoBE,SAAS,KACtE,OAAO,EAMT,IADA,IAAIC,GAAY,EACTA,GAELC,QAAQC,IAAI,kBAAoBL,GAIf,OAFjBC,EAD2B,eACIK,KAAKN,KAG9BC,EAAUM,OAAS,GACrBN,EAAUO,SAAQ,SAACC,GACjBT,EAAsBA,EAAoBU,QAAQD,EAAS,OAMjEL,QAAQC,IAAI,cAAgBL,GAIX,OAFjBC,EADwB,eACIK,KAAKN,KAG3BC,EAAUM,OAAS,GAErBN,EAAUO,SAAQ,SAACC,GACjBT,EAAsBA,EAAoBU,QAAQD,EAAS,OAG/DN,GAAY,GAEZA,GAAY,EA8BhB,OArBAC,QAAQC,IAAI,aAAeL,GAIV,OAFjBC,EADuB,aACIK,KAAKN,KAG1BC,EAAUM,OAAS,GAErBN,EAAUO,SAAQ,SAACC,GAEjBT,EAAsBA,EAAoBU,QAAQD,EAAS,OASjEL,QAAQC,IAAIL,IAGRA,EAAoBE,SAAS,OAAQF,EAAoBE,SAAS,KA/ElES,CARwB9B,IAS1BuB,QAAQC,IAAI,cACL,eAEPD,QAAQC,IAAI,iBACL,qBAXL,kBAAC,IAAD,KAAOtB,IA4Fb,IAAMG,EAAS0B,IAAWC,OAAO,CAC/B1B,UAAW,CACT2B,KAAM,EACNC,gBAAiB,OACjBC,WAAY,SACZC,eAAgB,a","file":"static/js/app.752565e7.chunk.js","sourcesContent":["\nimport React, { useState } from 'react';\nimport { StyleSheet, Text, View, Button, TextInput } from 'react-native';\n\nexport default function App() {\n\n  const [state, setstate] = useState(\"\")\n  const [result, setResult] = useState(\"\")\n\n  return (\n    <View style={styles.container}>\n      < Text style={{\n        margin: 10,\n        textAlign: \"left\"\n      }} > Verificador</Text >\n      <TextInput\n        style={{\n          margin: 10,\n          borderWidth: 1,\n          borderColor: \"#dd\",\n          textAlign: \"left\",\n          height: 40\n        }}\n        placeholder='valor a examinar'\n        autoCapitalize='none'\n        value={state}\n        onChangeText={(text) => setstate(text)} />\n      <Button\n        title='Examinar' style={{\n          margin: 10\n        }}\n        onPress={(() => {\n          setResult(examinate(state))\n        })} />\n      <Text>{result}</Text>\n    </View>\n  );\n}\n\nfunction examinate(value) {\n  if (isBalanced(value)) {\n    console.log(\"Balanceado\");\n    return \"Balanceado\";\n  } else {\n    console.log(\"No balanceado\");\n    return \"No balanceado\";\n  }\n}\n\nfunction isBalanced(value) {\n\n  var valueWithoutElement = value;\n  var searching = [];\n\n  if (!valueWithoutElement.includes(\"(\") && !valueWithoutElement.includes(\")\")) {\n    return true\n  }\n\n  //................................\n\n  var isExisted = true;\n  while (isExisted) {\n\n    console.log(\"pre face wrap: \" + valueWithoutElement);\n    const exreDetectFaceWrap = /\\([:][()]\\)/g\n    searching = exreDetectFaceWrap.exec(valueWithoutElement);\n    //remover elementos encontrados\n    if (searching != null) {\n      if (searching.length > 0) {\n        searching.forEach((element) => {\n          valueWithoutElement = valueWithoutElement.replace(element, '');\n        });\n      }\n    }\n\n    //console.log(valueWithoutElement);\n    console.log(\"pre group: \" + valueWithoutElement);\n    const exreDetectGroup = /\\([^()]*?\\)/g\n    searching = exreDetectGroup.exec(valueWithoutElement);\n    //detecta objetos que esten entre parentesis, que no sean parentesis\n    if (searching != null) {\n      if (searching.length > 0) {\n        //remover elementos encontrados\n        searching.forEach((element) => {\n          valueWithoutElement = valueWithoutElement.replace(element, '');\n        });\n      }\n      isExisted = true;\n    } else {\n      isExisted = false;\n    }\n  }\n\n\n\n  //................................\n\n  //todo valida si posee caritas\n  console.log(\"pre face: \" + valueWithoutElement);\n  const exreDetectFace = /([:][()])/g\n  searching = exreDetectFace.exec(valueWithoutElement);\n  //remover elementos encontrados\n  if (searching != null) {\n    if (searching.length > 0) {\n      //console.log(searching);\n      searching.forEach((element) => {\n        //console.log(element);\n        valueWithoutElement = valueWithoutElement.replace(element, '');\n        //console.log(valueWithoutElement);\n      });\n    }\n  }\n\n\n  //................................\n\n  console.log(valueWithoutElement);\n\n  //valida si sobran parentesis o no\n  if (valueWithoutElement.includes(\"(\") || valueWithoutElement.includes(\")\")) {\n    return false\n  } else {\n    return true\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"],"sourceRoot":""}